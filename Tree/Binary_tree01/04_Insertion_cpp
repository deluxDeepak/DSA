// Given a binary tree and a key the task is to insert the key into the binaary tree at the poisition availabale int the level order traversal 
#include <iostream>
#include <queue>
using namespace std;
class node
{
    public:
    int data ;
    node*left,*right;
    node(int value)
    {
        data=value;
        left=right=nullptr;
    }
};
node*insert_level_order(node*root,int target)
{
    // if node not exist 
    if (root==nullptr)
    {
        root=new node(target);
        return root;
    }
    
    queue<node*>q;
    q.push(root);
    while (!q.empty())
    {
        node*curr=q.front();
        q.pop();

        // Check if left child is empty
        if (curr->left == nullptr)
        {
            curr->left = new node(target);
            return root;
        }
        else
        {
            // If left child exists, add to queue
            q.push(curr->left);
        }
        
        // Check if right child is empty
        if (curr->right == nullptr)
        {
            curr->right = new node(target);
            return root;
        }
        else
        {
            // If right child exists, add to queue
            q.push(curr->right);
        }
    }
    return root;
}

void preoder(node*root)
{
    if (root==nullptr)
    {
        return;
    }
    cout<<root->data<<" ";
    preoder(root->left);
    preoder(root->right);
    
}
int main()
{
    // cerating the tree 
    node*root=new node(1);
    root->left=new node(2);
    root->right=new node(3);
    root->left->left=new node(4);
    root->left->right=new node(5);

    int key=10;
    root=insert_level_order(root,key);

    cout<<"Preorder traversal :";
    preoder(root);
    return 0;
}